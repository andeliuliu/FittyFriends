"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useLocalCredentials_exports = {};
__export(useLocalCredentials_exports, {
  useLocalCredentials: () => useLocalCredentials
});
module.exports = __toCommonJS(useLocalCredentials_exports);
var import_clerk_react = require("@clerk/clerk-react");
var import_expo_local_authentication = require("expo-local-authentication");
var import_expo_secure_store = require("expo-secure-store");
var import_react = require("react");
var import_utils = require("../../utils");
const useEnrolledBiometric = () => {
  const [isEnrolled, setIsEnrolled] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    let ignore = false;
    void (0, import_expo_local_authentication.isEnrolledAsync)().then((res) => {
      if (ignore) {
        return;
      }
      setIsEnrolled(res);
    });
    return () => {
      ignore = true;
    };
  }, []);
  return isEnrolled;
};
const useAuthenticationType = () => {
  const [authenticationType, setAuthenticationType] = (0, import_react.useState)(null);
  (0, import_react.useEffect)(() => {
    let ignore = false;
    void (0, import_expo_local_authentication.supportedAuthenticationTypesAsync)().then((numericTypes) => {
      if (ignore) {
        return;
      }
      if (numericTypes.length === 0) {
        return;
      }
      if (numericTypes.includes(import_expo_local_authentication.AuthenticationType.IRIS) || numericTypes.includes(import_expo_local_authentication.AuthenticationType.FACIAL_RECOGNITION)) {
        setAuthenticationType("face-recognition");
      } else {
        setAuthenticationType("fingerprint");
      }
    });
    return () => {
      ignore = true;
    };
  }, []);
  return authenticationType;
};
const useUserOwnsCredentials = ({ storeKey }) => {
  const { user } = (0, import_clerk_react.useUser)();
  const [userOwnsCredentials, setUserOwnsCredentials] = (0, import_react.useState)(false);
  const getUserCredentials = (storedIdentifier) => {
    if (!user || !storedIdentifier) {
      return false;
    }
    const identifiers = [
      user.emailAddresses.map((e) => e.emailAddress),
      user.phoneNumbers.map((p) => p.phoneNumber)
    ].flat();
    if (user.username) {
      identifiers.push(user.username);
    }
    return identifiers.includes(storedIdentifier);
  };
  (0, import_react.useEffect)(() => {
    let ignore = false;
    (0, import_expo_secure_store.getItemAsync)(storeKey).catch(() => null).then((res) => {
      if (ignore) {
        return;
      }
      setUserOwnsCredentials(getUserCredentials(res));
    });
    return () => {
      ignore = true;
    };
  }, [storeKey, user]);
  return [userOwnsCredentials, setUserOwnsCredentials];
};
const useLocalCredentials = () => {
  const { isLoaded, signIn } = (0, import_clerk_react.useSignIn)();
  const { publishableKey } = (0, import_clerk_react.useClerk)();
  const key = `__clerk_local_auth_${publishableKey}_identifier`;
  const pkey = `__clerk_local_auth_${publishableKey}_password`;
  const [hasLocalAuthCredentials, setHasLocalAuthCredentials] = (0, import_react.useState)(!!(0, import_expo_secure_store.getItem)(key));
  const [userOwnsCredentials, setUserOwnsCredentials] = useUserOwnsCredentials({ storeKey: key });
  const hasEnrolledBiometric = useEnrolledBiometric();
  const authenticationType = useAuthenticationType();
  const biometricType = hasEnrolledBiometric ? authenticationType : null;
  const setCredentials = async (creds) => {
    if (!await (0, import_expo_local_authentication.isEnrolledAsync)()) {
      return;
    }
    if (creds.identifier && !creds.password) {
      return import_utils.errorThrower.throw(
        `useLocalCredentials: setCredentials() A password is required when specifying an identifier.`
      );
    }
    if (creds.identifier) {
      await (0, import_expo_secure_store.setItemAsync)(key, creds.identifier);
    }
    const storedIdentifier = await (0, import_expo_secure_store.getItemAsync)(key).catch(() => null);
    if (!storedIdentifier) {
      return import_utils.errorThrower.throw(
        `useLocalCredentials: setCredentials() an identifier should already be set in order to update its password.`
      );
    }
    setHasLocalAuthCredentials(true);
    await (0, import_expo_secure_store.setItemAsync)(pkey, creds.password, {
      keychainAccessible: import_expo_secure_store.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY,
      requireAuthentication: true
    });
  };
  const clearCredentials = async () => {
    await Promise.all([(0, import_expo_secure_store.deleteItemAsync)(key), (0, import_expo_secure_store.deleteItemAsync)(pkey)]);
    setHasLocalAuthCredentials(false);
    setUserOwnsCredentials(false);
  };
  const authenticate = async () => {
    if (!isLoaded) {
      return import_utils.errorThrower.throw(
        `useLocalCredentials: authenticate() Clerk has not loaded yet. Wait for clerk to load before calling this function`
      );
    }
    const identifier = await (0, import_expo_secure_store.getItemAsync)(key).catch(() => null);
    if (!identifier) {
      return import_utils.errorThrower.throw(`useLocalCredentials: authenticate() the identifier could not be found`);
    }
    const password = await (0, import_expo_secure_store.getItemAsync)(pkey).catch(() => null);
    if (!password) {
      return import_utils.errorThrower.throw(`useLocalCredentials: authenticate() cannot retrieve a password for ${identifier}`);
    }
    return signIn.create({
      strategy: "password",
      identifier,
      password
    });
  };
  return {
    /**
     * Stores the provided credentials on the device if the device has enrolled biometrics.
     * The end user needs to have a passcode set in order for the credentials to be stored, and those credentials will be removed if the passcode gets removed.
     * @param credentials A [`LocalCredentials`](#localcredentials) object.
     * @return A promise that will reject if value cannot be stored on the device.
     */
    setCredentials,
    /**
     * A Boolean that indicates if there are any credentials stored on the device.
     */
    hasCredentials: hasLocalAuthCredentials,
    /**
     * A Boolean that indicates if the stored credentials belong to the signed in uer. When there is no signed-in user the value will always be `false`.
     */
    userOwnsCredentials,
    /**
     * Removes the stored credentials from the device.
     * @return A promise that will reject if value cannot be deleted from the device.
     */
    clearCredentials,
    /**
     * Attempts to read the stored credentials and creates a sign in attempt with the password strategy.
     * @return A promise with a SignInResource if the stored credentials were accessed, otherwise the promise will reject.
     */
    authenticate,
    /**
     * Indicates the supported enrolled biometric authenticator type.
     * Can be `facial-recognition`, `fingerprint` or null.
     */
    biometricType
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useLocalCredentials
});
//# sourceMappingURL=useLocalCredentials.js.map