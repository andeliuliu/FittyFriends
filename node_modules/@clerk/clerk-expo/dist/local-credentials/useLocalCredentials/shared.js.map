{"version":3,"sources":["../../../src/local-credentials/useLocalCredentials/shared.ts"],"sourcesContent":["import type { SignInResource } from '@clerk/types';\n\ntype LocalCredentials = {\n  /**\n   * The identifier of the credentials to be stored on the device. It can be a username, email, phone number, etc.\n   */\n  identifier?: string;\n  /**\n   * The password for the identifier to be stored on the device. If an identifier already exists on the device passing only password would update the password for the stored identifier.\n   */\n  password: string;\n};\n\ntype BiometricType = 'fingerprint' | 'face-recognition';\n\ntype LocalCredentialsReturn = {\n  setCredentials: (creds: LocalCredentials) => Promise<void>;\n  hasCredentials: boolean;\n  userOwnsCredentials: boolean | null;\n  clearCredentials: () => Promise<void>;\n  authenticate: () => Promise<SignInResource>;\n  biometricType: BiometricType | null;\n};\n\nconst LocalCredentialsInitValues: LocalCredentialsReturn = {\n  setCredentials: () => Promise.resolve(),\n  hasCredentials: false,\n  userOwnsCredentials: null,\n  clearCredentials: () => Promise.resolve(),\n  // @ts-expect-error Initial value cannot return what the type expects\n  authenticate: () => Promise.resolve({}),\n  biometricType: null,\n};\n\nexport { LocalCredentialsInitValues };\n\nexport type { LocalCredentials, BiometricType, LocalCredentialsReturn };\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA,MAAM,6BAAqD;AAAA,EACzD,gBAAgB,MAAM,QAAQ,QAAQ;AAAA,EACtC,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,kBAAkB,MAAM,QAAQ,QAAQ;AAAA;AAAA,EAExC,cAAc,MAAM,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACtC,eAAe;AACjB;","names":[]}