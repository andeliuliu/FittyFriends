{"version":3,"sources":["../../../src/provider/singleton/createClerkInstance.ts"],"sourcesContent":["import type { FapiRequestInit, FapiResponse } from '@clerk/clerk-js/dist/types/core/fapiClient';\nimport type { Clerk } from '@clerk/clerk-js/headless';\nimport type { BrowserClerk, HeadlessBrowserClerk } from '@clerk/clerk-react';\n\nimport { MemoryTokenCache } from '../../cache/MemoryTokenCache';\nimport { errorThrower } from '../../errorThrower';\nimport { isNative } from '../../utils';\nimport type { BuildClerkOptions } from './types';\n\nconst KEY = '__clerk_client_jwt';\n\n/**\n * @deprecated Use `getClerkInstance` instead. `Clerk` will be removed in the next major version.\n */\nexport let clerk: HeadlessBrowserClerk | BrowserClerk;\nlet __internal_clerk: HeadlessBrowserClerk | BrowserClerk | undefined;\n\nexport function createClerkInstance(ClerkClass: typeof Clerk) {\n  return (options?: BuildClerkOptions): HeadlessBrowserClerk | BrowserClerk => {\n    const {\n      publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY || process.env.CLERK_PUBLISHABLE_KEY || '',\n      tokenCache = MemoryTokenCache,\n    } = options || {};\n\n    if (!__internal_clerk && !publishableKey) {\n      errorThrower.throwMissingPublishableKeyError();\n    }\n\n    // Support \"hot-swapping\" the Clerk instance at runtime. See JS-598 for additional details.\n    const hasKeyChanged = __internal_clerk && !!publishableKey && publishableKey !== __internal_clerk.publishableKey;\n\n    if (!__internal_clerk || hasKeyChanged) {\n      if (hasKeyChanged) {\n        tokenCache.clearToken?.(KEY);\n      }\n\n      const getToken = tokenCache.getToken;\n      const saveToken = tokenCache.saveToken;\n      __internal_clerk = clerk = new ClerkClass(publishableKey);\n\n      // @ts-expect-error - This is an internal API\n      __internal_clerk.__unstable__onBeforeRequest(async (requestInit: FapiRequestInit) => {\n        // https://reactnative.dev/docs/0.61/network#known-issues-with-fetch-and-cookie-based-authentication\n        requestInit.credentials = 'omit';\n\n        // Instructs the backend to parse the api token from the Authorization header.\n        requestInit.url?.searchParams.append('_is_native', '1');\n\n        const jwt = await getToken(KEY);\n        (requestInit.headers as Headers).set('authorization', jwt || '');\n\n        // Instructs the backend that the request is from a mobile device.\n        // Some iOS devices have an empty user-agent, so we can't rely on that.\n        if (isNative()) {\n          (requestInit.headers as Headers).set('x-mobile', '1');\n        }\n      });\n\n      // @ts-expect-error - This is an internal API\n      __internal_clerk.__unstable__onAfterResponse(async (_: FapiRequestInit, response: FapiResponse<unknown>) => {\n        const authHeader = response.headers.get('authorization');\n        if (authHeader) {\n          await saveToken(KEY, authHeader);\n        }\n      });\n    }\n    return __internal_clerk;\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,8BAAiC;AACjC,0BAA6B;AAC7B,mBAAyB;AAGzB,MAAM,MAAM;AAKL,IAAI;AACX,IAAI;AAEG,SAAS,oBAAoB,YAA0B;AAC5D,SAAO,CAAC,YAAqE;AAlB/E;AAmBI,UAAM;AAAA,MACJ,iBAAiB,QAAQ,IAAI,qCAAqC,QAAQ,IAAI,yBAAyB;AAAA,MACvG,aAAa;AAAA,IACf,IAAI,WAAW,CAAC;AAEhB,QAAI,CAAC,oBAAoB,CAAC,gBAAgB;AACxC,uCAAa,gCAAgC;AAAA,IAC/C;AAGA,UAAM,gBAAgB,oBAAoB,CAAC,CAAC,kBAAkB,mBAAmB,iBAAiB;AAElG,QAAI,CAAC,oBAAoB,eAAe;AACtC,UAAI,eAAe;AACjB,yBAAW,eAAX,oCAAwB;AAAA,MAC1B;AAEA,YAAM,WAAW,WAAW;AAC5B,YAAM,YAAY,WAAW;AAC7B,yBAAmB,QAAQ,IAAI,WAAW,cAAc;AAGxD,uBAAiB,4BAA4B,OAAO,gBAAiC;AAzC3F,YAAAA;AA2CQ,oBAAY,cAAc;AAG1B,SAAAA,MAAA,YAAY,QAAZ,gBAAAA,IAAiB,aAAa,OAAO,cAAc;AAEnD,cAAM,MAAM,MAAM,SAAS,GAAG;AAC9B,QAAC,YAAY,QAAoB,IAAI,iBAAiB,OAAO,EAAE;AAI/D,gBAAI,uBAAS,GAAG;AACd,UAAC,YAAY,QAAoB,IAAI,YAAY,GAAG;AAAA,QACtD;AAAA,MACF,CAAC;AAGD,uBAAiB,4BAA4B,OAAO,GAAoB,aAAoC;AAC1G,cAAM,aAAa,SAAS,QAAQ,IAAI,eAAe;AACvD,YAAI,YAAY;AACd,gBAAM,UAAU,KAAK,UAAU;AAAA,QACjC;AAAA,MACF,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AACF;","names":["_a"]}