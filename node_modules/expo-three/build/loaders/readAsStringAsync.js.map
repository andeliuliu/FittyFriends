{"version":3,"file":"readAsStringAsync.js","sourceRoot":"","sources":["../../src/loaders/readAsStringAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,KAAK,MAAM,UAAU,CAAC;AAI7B,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,+BAA+B,CAC3D,QAAgB;IAEhB,IAAI,MAAM,CAAC,wBAAwB,EAAE,CAAC;QACpC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;QACtC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACrC,MAAM,CAAC,IAAI,CACT,QAAQ,EACR,KAAK,EAAE,KAAK,EAAE,EAAE;YACd,aAAa;YACb,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;QACvB,CAAC,EACD,GAAG,EAAE,GAAE,CAAC,EACR,MAAM,CACP,CACF,CAAC;IACJ,CAAC;IACD,IAAI,CAAC;QACH,OAAO,MAAM,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CACb,2CAA2C,QAAQ,KAAK,OAAO,EAAE,CAClE,CAAC;IACJ,CAAC;YAAS,CAAC;QACT,IAAI,MAAM,CAAC,wBAAwB,EAAE,CAAC;YACpC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { readAsStringAsync } from 'expo-file-system';\nimport { Platform } from 'react-native';\n\nimport THREE from '../Three';\n\ndeclare let global: any;\n\nexport default async function readFromFileSystemAsStringAsync(\n  localUri: string\n): Promise<string | null> {\n  if (global.__expo_three_log_loading) {\n    console.time('loadAsset');\n  }\n\n  if (Platform.OS === 'web') {\n    const loader = new THREE.FileLoader();\n    return new Promise((resolve, reject) =>\n      loader.load(\n        localUri,\n        async (value) => {\n          // @ts-ignore\n          resolve(await value);\n        },\n        () => {},\n        reject\n      )\n    );\n  }\n  try {\n    return await readAsStringAsync(localUri);\n  } catch ({ message }) {\n    throw new Error(\n      `ExpoTHREE: FileSystem.readAsStringAsync(${localUri}) ${message}`\n    );\n  } finally {\n    if (global.__expo_three_log_loading) {\n      console.timeEnd('loadAsset');\n    }\n  }\n}\n"]}